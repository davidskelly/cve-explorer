package com.example.cveexplorer;

import com.example.cveexplorer.controller.CveExplorerController;
import com.example.cveexplorer.entity.Cve;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
class CveExplorerControllerTests {

	@Autowired
	private CveExplorerController controller;

	@Autowired
	private CveRepository cveRepository;

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private ObjectMapper objectMapper;


	@Test
	public void contextLoads() throws Exception {
		assertThat(controller).isNotNull();
	}

	@Test
	public void testCveCreateSuccess() throws Exception {
		// GIVEN: new CVE data
		Cve newCveData = new Cve();
		newCveData.setDescription("test cve");
		newCveData.setSeverity("low");

		// WHEN: a new CVE is created
		ResultActions results = this.mockMvc.perform(
				post("/cve")
						.content(objectMapper.writeValueAsString(newCveData))
						.contentType(MediaType.APPLICATION_JSON));

		// THEN: the cve is successfully created
		results.andExpect(status().isCreated());

		Cve createdCve = objectMapper.readValue(
				results.andReturn().getResponse().getContentAsString(), Cve.class);

		// THEN: the cve is present in the database
		cveRepository.findByCveId(createdCve.getCveId());
	}

	@Test
	public void testCveCreateFailureInvalidData() throws Exception {
		// GIVEN: CVE data missing description
		Cve newCveData = new Cve();
		newCveData.setSeverity("low");

		// WHEN: a new CVE is created
		ResultActions results = this.mockMvc.perform(
				post("/cve")
						.content(objectMapper.writeValueAsString(newCveData))
						.contentType(MediaType.APPLICATION_JSON));

		// THEN: the cve has been rejected
		results.andExpect(status().is4xxClientError());
	}

	@Test
	public void testCveGetSuccess() throws Exception {
		// GIVEN: existing Cve
		cveRepository.save(new Cve().setCveId("CVE-1111").setDescription("test 1234"));

		// WHEN: the cve is retrieved
		ResultActions results = this.mockMvc.perform(get("/cve/CVE-1111"));

		// THEN: the cve has been retrieved
		Cve retrievedCve = objectMapper.readValue(
				results.andReturn().getResponse().getContentAsString(), Cve.class);

		// THEN: the contents of the CVE match
		assertThat(retrievedCve.getCveId()).isEqualTo("CVE-1111");
		assertThat(retrievedCve.getDescription()).isEqualTo("test 1234");
	}

	@Test
	public void testCveGetFailure() throws Exception {
		// GIVEN: a non-existent cve

		// WHEN: the cve is retrieved
		ResultActions results = this.mockMvc.perform(get("/cve/CVE-non-existant"));

		// THEN: a 404 is returned
		results.andExpect(status().isNotFound());
	}

	@Test
	public void testCveSearchSuccess() throws Exception {
		// GIVEN: existing Cves
		cveRepository.save(new Cve().setCveId("CVE-2111").setDescription("yellow"));
		cveRepository.save(new Cve().setCveId("CVE-2112").setDescription("white"));

		// WHEN: the cve is searched
		ResultActions results = this.mockMvc.perform(get("/cve/search?search=yellow"));

		Cve[] retrievedCves = objectMapper.readValue(
				results.andReturn().getResponse().getContentAsString(), Cve[].class);

		// THEN: the wordpress cve has been found
		assertThat(retrievedCves.length).isEqualTo(1);
		assertThat(retrievedCves[0].getDescription()).isEqualTo("yellow");
	}

	@Test
	public void testCveSearchEmpty() throws Exception {
		// GIVEN: existing Cves
		cveRepository.save(new Cve().setCveId("CVE-3111").setDescription("orange"));
		cveRepository.save(new Cve().setCveId("CVE-3112").setDescription("blue"));

		// WHEN: the cve is searched with no search string
		ResultActions results = this.mockMvc.perform(get("/cve/search?search="));

		Cve[] retrievedCves = objectMapper.readValue(
				results.andReturn().getResponse().getContentAsString(), Cve[].class);

		// THEN: an empty list is returned
		assertThat(retrievedCves.length).isEqualTo(0);
	}

	@Test
	public void testCveSearchNoResults() throws Exception {
		// GIVEN: existing Cves
		cveRepository.save(new Cve().setCveId("CVE-4111").setDescription("red"));
		cveRepository.save(new Cve().setCveId("CVE-4112").setDescription("green"));

		// WHEN: the cve is searched with no matching items
		ResultActions results = this.mockMvc.perform(get("/cve/search?search=nothing"));

		Cve[] retrievedCves = objectMapper.readValue(
				results.andReturn().getResponse().getContentAsString(), Cve[].class);

		// THEN: an empty list is returned
		assertThat(retrievedCves.length).isEqualTo(0);
	}
}

package com.example.cveexplorer.feed;

import com.example.cveexplorer.CveRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class RefreshFeeds {

	private static final Logger LOG = LoggerFactory.getLogger(RefreshFeeds.class);

	private static CveRepository repository;
	private static List<Feed> feeds = new ArrayList<>();
	private static Date lastRefreshDate;

	public static void setRepository(CveRepository inRepository) {
		repository = inRepository;
	}

	synchronized public static void addFeed(Feed feed) {
		feeds.add(feed);
	}

	/**
	 * Refresh all feeds on given schedule. This will pull in new data from outside sources to add to
	 * the internal database.
	 */
	@Scheduled(fixedDelay = 1000 * 60 * 30, initialDelay = 10 * 1000)
	synchronized public void refreshFeeds() {
		if (lastRefreshDate == null) {
			// start initial data from a certain amount of time
			lastRefreshDate = Date.from(Instant.now().minus(8, ChronoUnit.HOURS));
		}

		Date now = Date.from(Instant.now());

		LOG.info("Refreshing feeds from " + lastRefreshDate + " to " + now);
		for (Feed feed : feeds) {
			try {
				feed.refresh(repository, lastRefreshDate, now);

			} catch (Exception e) {
				LOG.error("Feed refresh failed", e);
			}
		}

		lastRefreshDate = now;
	}
}

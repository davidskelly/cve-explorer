package com.example.cveexplorer.feed;

import com.example.cveexplorer.repository.CveRepository;
import com.example.cveexplorer.entity.Cve;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.yaml.snakeyaml.util.UriEncoder;

import java.net.URI;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.Date;

public class NVDFeed implements Feed {
	private static final Logger LOG = LoggerFactory.getLogger(NVDFeed.class);

	private static final String NVD_URL = "https://services.nvd.nist.gov/rest/json/cves/1.0/";

	private static final String NVD_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss:SSS 'UTC+00:00'";
	private static final String NVD_RESPONSE_DATE_FORMAT = "yyyy-MM-dd'T'HH:mmX";

	/**
	 * Reach out to NVD api and retrieve data between the start and end date.
	 *
	 * Any error that occurs (connect timeout, read timeout, other error) is thrown up to the caller.
	 *
	 * @param startDate -
	 * @param endDate   -
	 * @return - json data string
	 */
	String getNVDFeedData(Date startDate, Date endDate) {
		// example:
		// https://services.nvd.nist.gov/rest/json/cves/1.0/?modStartDate=2021-08-04T13:00:00:000%20UTC%2B01:00&modEndDate=2021-10-22T13:36:00:000%20UTC%2B01:00

		// instantiate object for thread safety (could also use threadlocal)
		SimpleDateFormat nvdDateFormat = new SimpleDateFormat(NVD_DATE_FORMAT);

		String url = NVD_URL;
		url += "?modStartDate=" + UriEncoder.encode(nvdDateFormat.format(startDate));
		url += "&modEndDate=" + UriEncoder.encode(nvdDateFormat.format(endDate));

		LOG.info("Retrieving data feed: " + url);

		// prevent long running/hanging connections by setting timeouts
		RestTemplate restTemplate = new RestTemplateBuilder()
				.setReadTimeout(Duration.ofSeconds(10))
				.setConnectTimeout(Duration.ofSeconds(10))
				.build();
		HttpHeaders headers = new HttpHeaders();

		// set identity encoding to avoid a gzipped response
		headers.add("Accept-Encoding", "identity");

		HttpEntity<String> entity = new HttpEntity<>("body", headers);
		// create a URI to avoid double encoding the url
		ResponseEntity<String> response = restTemplate.exchange(URI.create(url), HttpMethod.GET, entity, String.class);

		// ROADMAP - handle paginated results
		return response.getBody();
	}

	/**
	 * Create a Cve entity item from a json object containing data. An exception is thrown on an unexpected data format.
	 *
	 * @param cveItem - data retrieved from NVD feed
	 * @return - a Cve entity
	 * @throws ParseException - on unexpected date formats
	 */
	public Cve extractCve(JSONObject cveItem) throws ParseException {
		// "publishedDate": "2022-04-07T22:15Z",
		String published = cveItem.getString("publishedDate");
		String modified = cveItem.getString("lastModifiedDate");

		JSONObject jcve = cveItem.getJSONObject("cve");
		String cveId = jcve.getJSONObject("CVE_data_meta")
				.getString("ID");

		String description = jcve.getJSONObject("description")
				.getJSONArray("description_data")
				.getJSONObject(0)
				.getString("value");

		String severity = "";
		JSONObject jimpact = cveItem.getJSONObject("impact");
		JSONObject jbaseMetricV2 = jimpact.optJSONObject("baseMetricV2");
		if (jbaseMetricV2 != null) {
			severity = jbaseMetricV2.optString("severity", "");
		}

		// instantiate object for thread safety (could also use threadlocal)
		SimpleDateFormat responseDateFormat = new SimpleDateFormat(NVD_RESPONSE_DATE_FORMAT);

		Cve cve = new Cve();
		cve.setCveId(cveId);
		cve.setSource(Cve.SOURCE_TYPE_NVD);
		cve.setDescription(description);
		cve.setPublished(responseDateFormat.parse(published));
		cve.setModified(responseDateFormat.parse(modified));
		cve.setSeverity(severity);
		return cve;
	}

	@Override
	public void refresh(CveRepository repository, Date startDate, Date endDate) {
		LOG.info("Refreshing NVD feed");

		JSONObject json = new JSONObject(getNVDFeedData(startDate, endDate));
		JSONArray items = json.getJSONObject("result").getJSONArray("CVE_Items");

		for (int i = 0; i < items.length(); i++) {
			try {
				JSONObject item = items.getJSONObject(i);
				Cve cve = extractCve(item);
				repository.save(cve);

			} catch (Exception e) {
				// catch any exception and log, so that we can continue processing other items
				LOG.error("Error processing cve item " + i, e);
			}
		}

		LOG.info("Finished NVD feed, gathered " + items.length() + " cves.");
	}
}
